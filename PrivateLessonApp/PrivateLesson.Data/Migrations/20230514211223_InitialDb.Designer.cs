// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrivateLesson.Data.Concrete.EfCore.Context;

#nullable disable

namespace PrivateLesson.Data.Migrations
{
    [DbContext(typeof(PrivateLessonContext))]
    [Migration("20230514211223_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "35b2a5a4-fffb-4bd0-8c74-162ffa37bfa2",
                            RoleId = "df6ed406-7cd0-4bea-9e97-2ccc6820dd71"
                        },
                        new
                        {
                            UserId = "bef59f13-af31-490f-b481-965c72690a34",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "a184b20d-fdc7-4171-b0cb-caca41d49917",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "b8d737f9-b2f7-411c-a7d4-8b6298198bb3",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "cc9cf0a0-761b-4ffb-b325-e5b3fa8cc436",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "2821ee6b-8c36-415f-9458-d4a47d6c2422",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "a1bfaac3-0519-42da-a51e-d93ae59a8c0c",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "3573ec57-5790-4259-b5c5-0aeb42553ed5",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "c9ead625-4fb6-49f4-b740-6d06b6d5ba65",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "3e4a1f4f-57c3-4aa1-b13c-275c16517135",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "37edfc59-d932-49c1-8c1f-f316fb5b3a2f",
                            RoleId = "423a3281-5f15-4bf2-a926-7fa56c6278d7"
                        },
                        new
                        {
                            UserId = "0371daa7-4382-42dc-ba70-ebcbc6df86c0",
                            RoleId = "71b19006-559f-428b-a6be-4ea63e22a91e"
                        },
                        new
                        {
                            UserId = "3e8a67d0-7d73-4f8a-892a-126b7eabad6e",
                            RoleId = "71b19006-559f-428b-a6be-4ea63e22a91e"
                        },
                        new
                        {
                            UserId = "497aca28-adc3-4c73-999d-2d1004ca46f5",
                            RoleId = "71b19006-559f-428b-a6be-4ea63e22a91e"
                        },
                        new
                        {
                            UserId = "368a87a2-8d48-4ba4-a95b-a30d0c748b75",
                            RoleId = "71b19006-559f-428b-a6be-4ea63e22a91e"
                        },
                        new
                        {
                            UserId = "39b5b831-f183-4207-9943-fddeb972422e",
                            RoleId = "71b19006-559f-428b-a6be-4ea63e22a91e"
                        },
                        new
                        {
                            UserId = "239f4830-85da-4de5-a376-07e9455429ee",
                            RoleId = "71b19006-559f-428b-a6be-4ea63e22a91e"
                        },
                        new
                        {
                            UserId = "0485dba7-dec1-4ba7-bf63-9d39f8780383",
                            RoleId = "71b19006-559f-428b-a6be-4ea63e22a91e"
                        },
                        new
                        {
                            UserId = "0eab65f3-afab-4df4-ac32-b00b8df8b279",
                            RoleId = "71b19006-559f-428b-a6be-4ea63e22a91e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 701, DateTimeKind.Local).AddTicks(1253),
                            Description = "dsdasd",
                            IsApproved = true,
                            Price = 45m,
                            TeacherId = 4,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 701, DateTimeKind.Local).AddTicks(1256),
                            Url = "dsdds"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3539),
                            Description = "Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3541),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Fizik",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3544),
                            Description = "Fizik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3545),
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3546),
                            Description = "Kimya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3547),
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Biyoloji",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3548),
                            Description = "Biyoloji Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3549),
                            Url = "biyoloji"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Tarih",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3550),
                            Description = "Tarih Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3550),
                            Url = "tarih"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Coğrafya",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3552),
                            Description = "Coğrafya Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3552),
                            Url = "cografya"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3553),
                            Description = "İngilizce Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3554),
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Almanca",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3555),
                            Description = "Almanca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3556),
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Fransızca",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3557),
                            Description = "Fransızca Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3558),
                            Url = "fransizca"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Felsefe",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3559),
                            Description = "Felsefe Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3559),
                            Url = "felsefe"
                        },
                        new
                        {
                            Id = 11,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3561),
                            Description = "Müzik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3561),
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 12,
                            BranchName = "Resim",
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3563),
                            Description = "Resim Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(3563),
                            Url = "resim"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "35b2a5a4-fffb-4bd0-8c74-162ffa37bfa2"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "bef59f13-af31-490f-b481-965c72690a34"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "a184b20d-fdc7-4171-b0cb-caca41d49917"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "b8d737f9-b2f7-411c-a7d4-8b6298198bb3"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "cc9cf0a0-761b-4ffb-b325-e5b3fa8cc436"
                        },
                        new
                        {
                            Id = 6,
                            UserId = "2821ee6b-8c36-415f-9458-d4a47d6c2422"
                        },
                        new
                        {
                            Id = 7,
                            UserId = "a1bfaac3-0519-42da-a51e-d93ae59a8c0c"
                        },
                        new
                        {
                            Id = 8,
                            UserId = "3573ec57-5790-4259-b5c5-0aeb42553ed5"
                        },
                        new
                        {
                            Id = 9,
                            UserId = "c9ead625-4fb6-49f4-b740-6d06b6d5ba65"
                        },
                        new
                        {
                            Id = 10,
                            UserId = "3e4a1f4f-57c3-4aa1-b13c-275c16517135"
                        },
                        new
                        {
                            Id = 11,
                            UserId = "37edfc59-d932-49c1-8c1f-f316fb5b3a2f"
                        },
                        new
                        {
                            Id = 12,
                            UserId = "0371daa7-4382-42dc-ba70-ebcbc6df86c0"
                        },
                        new
                        {
                            Id = 13,
                            UserId = "3e8a67d0-7d73-4f8a-892a-126b7eabad6e"
                        },
                        new
                        {
                            Id = 14,
                            UserId = "497aca28-adc3-4c73-999d-2d1004ca46f5"
                        },
                        new
                        {
                            Id = 15,
                            UserId = "368a87a2-8d48-4ba4-a95b-a30d0c748b75"
                        },
                        new
                        {
                            Id = 16,
                            UserId = "39b5b831-f183-4207-9943-fddeb972422e"
                        },
                        new
                        {
                            Id = 17,
                            UserId = "239f4830-85da-4de5-a376-07e9455429ee"
                        },
                        new
                        {
                            Id = 18,
                            UserId = "0485dba7-dec1-4ba7-bf63-9d39f8780383"
                        },
                        new
                        {
                            Id = 19,
                            UserId = "0eab65f3-afab-4df4-ac32-b00b8df8b279"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "df6ed406-7cd0-4bea-9e97-2ccc6820dd71",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "71b19006-559f-428b-a6be-4ea63e22a91e",
                            Description = "Öğretmenler",
                            Name = "Öğretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "423a3281-5f15-4bf2-a926-7fa56c6278d7",
                            Description = "Öğrenciler",
                            Name = "Öğrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "35b2a5a4-fffb-4bd0-8c74-162ffa37bfa2",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "6ee5c37a-da8a-445d-9d7a-dd37e5b0fbed",
                            DateOfBirth = new DateTime(1997, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ilknurkartop@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "İlknur",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Kartop",
                            LockoutEnabled = false,
                            NormalizedEmail = "ILKNURKARTOP@HOTMAIL.COM",
                            NormalizedUserName = "ILKNURKARTOP",
                            PasswordHash = "AQAAAAIAAYagAAAAELtQsALAUcriNm+0C08A025m+FdxMWXdOcg3HM57JHIjLbVoUkJpRxjGGgcOL0uETg==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "461a508c-7871-4b6e-875c-2e0554676c7e",
                            TwoFactorEnabled = false,
                            UserName = "ilknurkartop"
                        },
                        new
                        {
                            Id = "bef59f13-af31-490f-b481-965c72690a34",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "57a06a85-1cff-4484-a687-a0e352c5a527",
                            DateOfBirth = new DateTime(1988, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmet.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEN1X0pJYHI43nH5BVQeMi5ZzItjG+9P+RV668y5cbbsTsaNfi6Rv9nVlbBLnUmYJ7g==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "737c5950-daea-4e84-a399-f389b286ec14",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "a184b20d-fdc7-4171-b0cb-caca41d49917",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "ebe9901c-c70b-4f4e-aad3-e72116fad4a0",
                            DateOfBirth = new DateTime(1995, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selin.ozcan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Özcan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELIN.OZCAN@EXAMPLE.COM",
                            NormalizedUserName = "SELINOZCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9MqZAF3QHua+qg1n0L7HhBspkVDQON0NFREhExmP/IWa/JAIp09EPab8fkjsjJUg==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c1a91c1-b61e-4cdd-a004-202963a137d9",
                            TwoFactorEnabled = false,
                            UserName = "selinozcan"
                        },
                        new
                        {
                            Id = "b8d737f9-b2f7-411c-a7d4-8b6298198bb3",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "c0a7a642-50c2-4dc4-9e75-4c21019e629d",
                            DateOfBirth = new DateTime(1990, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.kaya@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.KAYA@EXAMPLE.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAELr/iAQdbVXazz8tjJKW9ny/1u5/eo54r7+p+pX70AWhteEa1q0NptTRy8FcxgRJhQ==",
                            Phone = "5551112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07148fd2-cde7-415c-8988-0e84c044b447",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "cc9cf0a0-761b-4ffb-b325-e5b3fa8cc436",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "289d13d8-af06-4340-aa61-14383b1f45b4",
                            DateOfBirth = new DateTime(1998, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seda.dogan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Seda",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Doğan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEDA.DOGAN@EXAMPLE.COM",
                            NormalizedUserName = "SEDADOGAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGhVrC5eeY9ORRu0+4aqyymHGFztOmDyeoRrcOJoJLyltxkgs0x+ZBCJGe0gXOKuWg==",
                            Phone = "5554445566",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad688c79-7ed5-47ec-9c06-04c57beaab10",
                            TwoFactorEnabled = false,
                            UserName = "sedadogan"
                        },
                        new
                        {
                            Id = "2821ee6b-8c36-415f-9458-d4a47d6c2422",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "a07933b0-af53-419a-a920-647575c5e32b",
                            DateOfBirth = new DateTime(1985, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat.gunes@example.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.GUNES@EXAMPLE.COM",
                            NormalizedUserName = "MURATGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAEIYDH+xC71GBaWwEF/ImvkAtV6HIZKMEICI2m1gNIOHGd+5lh+sBUXaprlZdAqWhfg==",
                            Phone = "5558889999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9d79afc-8d81-490a-a24b-cf37c4c8c72e",
                            TwoFactorEnabled = false,
                            UserName = "muratgunes"
                        },
                        new
                        {
                            Id = "a1bfaac3-0519-42da-a51e-d93ae59a8c0c",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "ebe15832-307f-4d37-b6c8-84645a52a361",
                            DateOfBirth = new DateTime(1991, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "AYSEYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBrovY741CoYf4IYxrL8FXoSUmi9s3QQIkCW6E7nlSkywZu9s2ogo1V5IApUEEy8lA==",
                            Phone = "5553334444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fdbc979-3f2c-4bbd-9443-5416920c3450",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz"
                        },
                        new
                        {
                            Id = "3573ec57-5790-4259-b5c5-0aeb42553ed5",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "836a90c7-8adf-4610-8236-df38b482e1d7",
                            DateOfBirth = new DateTime(1980, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ercan.ozturk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ercan",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERCAN.OZTURK@EXAMPLE.COM",
                            NormalizedUserName = "ERCANOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAED/dRNbi7QdYb+trAW/zRactp9j5vNadpwBLtpxsHAdXmdGqMT/OW0/QGFmeWZLjOg==",
                            Phone = "5552223344",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ceef9f33-3270-45a5-a71f-a9226b806b81",
                            TwoFactorEnabled = false,
                            UserName = "ercanozturk"
                        },
                        new
                        {
                            Id = "c9ead625-4fb6-49f4-b740-6d06b6d5ba65",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "636701ee-8f8f-4338-845a-856e445997ab",
                            DateOfBirth = new DateTime(1996, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.guler@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Güler",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.GULER@EXAMPLE.COM",
                            NormalizedUserName = "ALIGULER",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9DpYB3v3+jVi2/wHNT2J1IuLxoiluhCFEa5rmcHPtKyOm2S6W7jevLKw3HMF/7bQ==",
                            Phone = "5557778899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d9ebb08-2357-44a4-a333-a709ed2411e1",
                            TwoFactorEnabled = false,
                            UserName = "aliguler"
                        },
                        new
                        {
                            Id = "3e4a1f4f-57c3-4aa1-b13c-275c16517135",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "b2605732-f768-4e54-9443-c93d9c4a7ffa",
                            DateOfBirth = new DateTime(1992, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hatice.aydin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Hatice",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "HATICE.AYDIN@EXAMPLE.COM",
                            NormalizedUserName = "HATICEAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFnaWcsHaegQRbPKlx8qAUKC24wQ4h0h2grcxInkpJ0o8uhoP3ontE81V3ViJJev6g==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "480dcc2c-fc57-4f09-9cbc-5f84d7ededa4",
                            TwoFactorEnabled = false,
                            UserName = "haticeaydin"
                        },
                        new
                        {
                            Id = "37edfc59-d932-49c1-8c1f-f316fb5b3a2f",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "7dbf3e24-0658-43c2-b649-4e107ca938e2",
                            DateOfBirth = new DateTime(1987, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mert.kilic@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mert",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kılıç",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT.KILIC@EXAMPLE.COM",
                            NormalizedUserName = "MERTKILIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEALiCJXato36tqIosj7Z07y/JB7uyCVwhzvf2LP+tO3IbisdIT1Nyn2DMt0N8ro41Q==",
                            Phone = "5551112233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf0ad90d-a775-4b85-9ad2-a856a6cd6e85",
                            TwoFactorEnabled = false,
                            UserName = "mertkilic"
                        },
                        new
                        {
                            Id = "0371daa7-4382-42dc-ba70-ebcbc6df86c0",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "b096af2d-c885-444e-9899-40d5edaaca14",
                            DateOfBirth = new DateTime(1994, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asli.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Aslı",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASLI.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ASLIYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELK2qsfYH5h+ZNvnY6bWGdcz/KMGxuiHvQwbphVQhS5wFpC2cwED9xopiOwgtVNhzA==",
                            Phone = "5555556677",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c605536-f74b-4d16-8542-6401f419fac7",
                            TwoFactorEnabled = false,
                            UserName = "asliyilmaz"
                        },
                        new
                        {
                            Id = "3e8a67d0-7d73-4f8a-892a-126b7eabad6e",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "1f42797a-9ed0-486c-b8a5-98037df10f45",
                            DateOfBirth = new DateTime(1991, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emre.yildir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 1,
                            LastName = "Yıldır",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.YILDIR@EXAMPLE.COM",
                            NormalizedUserName = "EMREYILDIR",
                            PasswordHash = "AQAAAAIAAYagAAAAENz2Vaeefhwb1LgbVsCRVWcN7lti5NnHsFC0vxCiMT4nj4jKN7c0hSfs3TsBDO+akQ==",
                            Phone = "5558887744",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "134ee7ef-1d6e-4666-a70d-60d8e54cf4e7",
                            TwoFactorEnabled = false,
                            UserName = "emreyildir"
                        },
                        new
                        {
                            Id = "497aca28-adc3-4c73-999d-2d1004ca46f5",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "37317556-2bec-4bc1-911b-6b57a9e20511",
                            DateOfBirth = new DateTime(1985, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ebru.ozturk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ebru",
                            Gender = "Kadın",
                            ImageId = 2,
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "EBRU.OZTURK@EXAMPLE.COM",
                            NormalizedUserName = "EBRUOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3iOvZ/8Ln1TG1QjQv870rsrmCGBSvmBYJsAwXgp1ts9wOVt3axIjtMYlMatqvfpw==",
                            Phone = "5552221133",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddf35b4b-1758-4ef7-bebf-77de5c989b41",
                            TwoFactorEnabled = false,
                            UserName = "ebruozturk"
                        },
                        new
                        {
                            Id = "368a87a2-8d48-4ba4-a95b-a30d0c748b75",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "ac6a8832-8f94-4099-8487-4ef99efb21e2",
                            DateOfBirth = new DateTime(1999, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "umut.celik@example.com",
                            EmailConfirmed = true,
                            FirstName = "Umut",
                            Gender = "Erkek",
                            ImageId = 3,
                            LastName = "Çelik",
                            LockoutEnabled = false,
                            NormalizedEmail = "UMUT.CELIK@EXAMPLE.COM",
                            NormalizedUserName = "UMUTCELIK",
                            PasswordHash = "AQAAAAIAAYagAAAAEK3B85J1UDRDimgDI79VKXHPCGn0H4wanxJqkDHbNhSKnHf+wH0tPL8tiyFJUFHc1A==",
                            Phone = "5552223344",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33636e6e-3c63-4e9f-a710-ad0e69fe1c4c",
                            TwoFactorEnabled = false,
                            UserName = "umutcelik"
                        },
                        new
                        {
                            Id = "39b5b831-f183-4207-9943-fddeb972422e",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "4f64b7c0-8a08-4240-ac98-2d28f5cbaa29",
                            DateOfBirth = new DateTime(1988, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aylin.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Aylin",
                            Gender = "Kadın",
                            ImageId = 4,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYLIN.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "AYLINDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEFta6xfSM50LvC/gLrZ+XzZgd+enYjc617n/5BLcUqIs1vt/Qr+G14h1ZMIGocFX+A==",
                            Phone = "5557779900",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64f001cf-4438-4ce4-8ff4-3b1239a9d272",
                            TwoFactorEnabled = false,
                            UserName = "aylindemir"
                        },
                        new
                        {
                            Id = "239f4830-85da-4de5-a376-07e9455429ee",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "a290a8bc-3e3b-4bf2-9c58-0e9779a9d1d4",
                            DateOfBirth = new DateTime(1997, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "murat.can@example.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Can",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURAT.CAN@EXAMPLE.COM",
                            NormalizedUserName = "MURATCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAorzwI45Rtnh6Gl6c5m9Dko+OaLMVaGg9l7lBS9zZPV/+Sp55XoJQk8jLLTJl43Jg==",
                            Phone = "5556667788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b5d21f5-e580-4001-b472-1ab13f774463",
                            TwoFactorEnabled = false,
                            UserName = "muratcan"
                        },
                        new
                        {
                            Id = "0485dba7-dec1-4ba7-bf63-9d39f8780383",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "5f716869-1557-472a-b1a0-1347e68c1af0",
                            DateOfBirth = new DateTime(1994, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elif.akyildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Akyıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF.AKYILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "ELIFAKYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEAfOYmWt13qK/hzKoxdllruAW1x2VQdOJK3S0nFfGrAUgQdJBGZmNCTBm/+luWWi7w==",
                            Phone = "5558887766",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52b05c37-c885-4b67-a654-e17dbc11cc5a",
                            TwoFactorEnabled = false,
                            UserName = "elifakyildiz"
                        },
                        new
                        {
                            Id = "0eab65f3-afab-4df4-ac32-b00b8df8b279",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "7cfe80c7-4e31-4596-9063-623094582bb4",
                            DateOfBirth = new DateTime(1992, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "goksu.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Göksu",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKSU.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "GOKSUDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOTUxgH3fz//yXO5371MYV+ghF2YrMcsi8hZOgR5KsUNgtgk6OkmCcujKbTcfNb8Iw==",
                            Phone = "5554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38305d03-36b0-437f-ab99-c2ab85152c01",
                            TwoFactorEnabled = false,
                            UserName = "goksudemir"
                        },
                        new
                        {
                            Id = "5b2a821e-0881-4136-aa48-8c852c2304d1",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "740415d2-f9ee-42ff-9020-a8436ab7a5d7",
                            DateOfBirth = new DateTime(1985, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emre.yildiz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.YILDIZ@EXAMPLE.COM",
                            NormalizedUserName = "EMREYILDIZ",
                            Phone = "5301234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f29957d-4b96-4c0c-9471-7323b31d31e0",
                            TwoFactorEnabled = false,
                            UserName = "emreyildiz"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8751),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8752),
                            Url = "1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8755),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8755),
                            Url = "2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8756),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8757),
                            Url = "3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8758),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8758),
                            Url = "4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8760),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 23, 702, DateTimeKind.Local).AddTicks(8760),
                            Url = "5.jpg"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(960),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(974),
                            UserId = "bef59f13-af31-490f-b481-965c72690a34"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(980),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(981),
                            UserId = "a184b20d-fdc7-4171-b0cb-caca41d49917"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(983),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(984),
                            UserId = "b8d737f9-b2f7-411c-a7d4-8b6298198bb3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(986),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(986),
                            UserId = "cc9cf0a0-761b-4ffb-b325-e5b3fa8cc436"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(988),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(988),
                            UserId = "2821ee6b-8c36-415f-9458-d4a47d6c2422"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(991),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(992),
                            UserId = "a1bfaac3-0519-42da-a51e-d93ae59a8c0c"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(993),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(994),
                            UserId = "3573ec57-5790-4259-b5c5-0aeb42553ed5"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(996),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(996),
                            UserId = "c9ead625-4fb6-49f4-b740-6d06b6d5ba65"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(998),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(999),
                            UserId = "3e4a1f4f-57c3-4aa1-b13c-275c16517135"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1002),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1002),
                            UserId = "37edfc59-d932-49c1-8c1f-f316fb5b3a2f"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1041),
                            Graduation = "Kırıkkale Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1042),
                            UserId = "0371daa7-4382-42dc-ba70-ebcbc6df86c0"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1047),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1048),
                            UserId = "3e8a67d0-7d73-4f8a-892a-126b7eabad6e"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1050),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1050),
                            UserId = "497aca28-adc3-4c73-999d-2d1004ca46f5"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1052),
                            Graduation = "Yıldız Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1053),
                            UserId = "368a87a2-8d48-4ba4-a95b-a30d0c748b75"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1056),
                            Graduation = "Akdeniz Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1056),
                            UserId = "39b5b831-f183-4207-9943-fddeb972422e"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1059),
                            Graduation = "Erciyes Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1060),
                            UserId = "239f4830-85da-4de5-a376-07e9455429ee"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1062),
                            Graduation = "Çukurova Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1062),
                            UserId = "0485dba7-dec1-4ba7-bf63-9d39f8780383"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1064),
                            Graduation = "Uludağ Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 15, 0, 12, 22, 43, DateTimeKind.Local).AddTicks(1064),
                            UserId = "0eab65f3-afab-4df4-ac32-b00b8df8b279"
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Advert", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("Adverts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Adverts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("PrivateLesson.Entity.Concrete.Teacher", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("PrivateLesson.Entity.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrivateLesson.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Branch", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("PrivateLesson.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
